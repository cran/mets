
#+TITLE: Analysis of multivariate binomial data: family analysis
#+AUTHOR: Klaus Holst & Thomas Scheike
#+PROPERTY: header-args:R  :session *R* :cache no :width 550 :height 450
#+PROPERTY: header-args  :eval never-export :exports both :results output :tangle yes :comments yes 
#+PROPERTY: header-args:R+ :colnames yes :rownames no :hlines yes
#+INCLUDE: header.org
#+OPTIONS: toc:nil timestamp:nil

#+BEGIN_SRC emacs-lisp :results silent :exports results :eval
(setq org-latex-listings t)
(setq org-latex-compiler-file-string 
"%%\\VignetteIndexEntry{Analysis of multivariate binomial data: family analysis}\n%%\\VignetteEngine{R.rsp::tex}\n%%\\VignetteKeyword{R}\n%%\\VignetteKeyword{package}\n%%\\VignetteKeyword{vignette}\n%%\\VignetteKeyword{LaTeX}\n")
#+END_SRC

----- 
# +LaTeX: \clearpage


* Overview 

When looking at multivariate binomial data with the aim of learning about the 
dependence that is present, possibly after correcting for some covariates many
models are available. 

   -  Random-effects models logistic regression covered elsewhere (glmer in lme4).

in the mets package you can fit the 

   -  Pairwise odds ratio model
   -  Bivariate Probit model 
      - With random effects
      - Special functionality for polygenic random effects modelling 
        such as ACE, ADE ,AE and so forth.
   -  Additive gamma random effects model 
      - Special functionality for polygenic random effects modelling 
        such as ACE, ADE ,AE and so forth.

These last three models are all fitted in the mets package using composite 
likelihoods for pairs of data.  The models can be fitted specifically based 
on specifying which pairs one wants to use for the composite score. 

The models are described in futher details in the binomial-twin vignette. 


* Simulated family data

We start by simulating family data with and additive gamma structure
on ACE form.  Here 40000 families consisting of two parents and
two children. The response is ybin and there is one covariate x. 

#+BEGIN_SRC R :results output :exports both :session *R* :cache yes 
 library(mets)
 set.seed(100)
 data <- simbinClaytonOakes.family.ace(40000,2,1,beta=NULL,alpha=NULL)
 data$number <- c(1,2,3,4)
 data$child <- 1*(data$number==3)
 head(data)
#+END_SRC  

#+RESULTS[27e4ff59d6c57b64dfea494da55eefcc71265da6]:
#+begin_example
Loading required package: timereg
Loading required package: survival
Loading required package: lava
lava version 1.5.1
mets version 1.2.1.2

Attaching package: ‘mets’

The following object is masked _by_ ‘.GlobalEnv’:

    object.defined

Warning message:
failed to assign RegisteredNativeSymbol for cor to cor since cor is already defined in the ‘mets’ namespace
  ybin x   type cluster number child
1    1 0 mother       1      1     0
2    1 1 father       1      2     0
3    1 1  child       1      3     1
4    1 1  child       1      4     0
5    0 0 mother       2      1     0
6    1 1 father       2      2     0
#+end_example


We fit the marginal models, and here find a covariate
effect at 0.3 for x. The marginals can be specified excatly as one
wants. 

#+BEGIN_SRC R :results output :exports both :session *R* :cache yes 
 aa <- margbin <- glm(ybin~x,data=data,family=binomial())
 summary(aa)
#+END_SRC 

#+RESULTS[590c57384c65b5b484a3d1c9cf1242b039c5bff4]:
#+begin_example

Call:
glm(formula = ybin ~ x, family = binomial(), data = data)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.5283  -1.3910   0.8632   0.9779   0.9779  

Coefficients:
            Estimate Std. Error z value Pr(>|z|)    
(Intercept) 0.489258   0.007291    67.1   <2e-16 ***
x           0.306070   0.010553    29.0   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 206272  on 159999  degrees of freedom
Residual deviance: 205428  on 159998  degrees of freedom
AIC: 205432

Number of Fisher Scoring iterations: 4
#+end_example


* Additive gamma model 

For the additive gamma of this type we set-up the random effects
included in such a family to make the ACE valid using some
special functions for this. 

The model is constructe with one enviromental effect shared by
all in the family and 8 genetic random effects with size (1/4) genetic
variance. Looking at the first family we see that the mother and
father both share half the genes with the children and that the
two children also share half their genes with this specification.
Below we also show an alternative specification of this model
using all pairs. 

#+BEGIN_SRC R :results output :exports both :session *R* :cache yes 
# make ace random effects design
out <- ace.family.design(data,member="type",id="cluster")
out$pardes
head(out$des.rv,4)
#+END_SRC 

#+RESULTS[<2020-02-04 17:13:22> 63425940650439526c66089193d428e2809af05e]:
: Error in ace.family.design(data, member = "type", id = "cluster") : 
:   could not find function "ace.family.design"
: Error: object 'out' not found
: Error in head(out$des.rv, 4) : object 'out' not found

We can now fit the model calling the two-stage function

#+BEGIN_SRC R :results output :exports both :session *R* :cache yes 
# fitting ace model for family structure
ts <- binomial.twostage(margbin,data=data,clusters=data$cluster,
theta=c(2,1),
random.design=out$des.rv,theta.des=out$pardes)
summary(ts)
# true variance parameters
c(2,1)
# total variance 
3
#+END_SRC 

#+RESULTS[<2020-02-04 17:13:22> 605e2ed2268ccac4c17c9637c62122dca6166dc9]:
:  Error in binomial.twostage(margbin, data = data, clusters = data$cluster,  : 
:   could not find function "binomial.twostage"
: Error in object[[i]] : object of type 'closure' is not subsettable
: [1] 2 1
: [1] 3


** Pairwise fitting 

We now specify the same model via extracting all pairs.  The random
effecs structure is simpler when just looking at pairs. 
A special function writes up all combinations of pairs. 
There are 6 pairs within each family, and we keep track of
who belongs to the different families. We first simply give the
pairs and we then should get the same result as before. 

#+BEGIN_SRC R :results output :exports both :session *R* :cache yes 
mm <- familycluster.index(data$cluster)
head(mm$familypairindex,n=20)
pairs <- mm$pairs
dim(pairs)
head(pairs,12)
#+END_SRC 

#+RESULTS[d36e9dab79ac94bc13d0fad305a098ba343ea904]:
#+begin_example
 [1] 1 2 1 3 1 4 2 3 2 4 3 4 5 6 5 7 5 8 6 7
[1] 240000      2
      [,1] [,2]
 [1,]    1    2
 [2,]    1    3
 [3,]    1    4
 [4,]    2    3
 [5,]    2    4
 [6,]    3    4
 [7,]    5    6
 [8,]    5    7
 [9,]    5    8
[10,]    6    7
[11,]    6    8
[12,]    7    8
#+end_example

Now with the pairs we fit the model 

#+BEGIN_SRC R :results output :exports both :session *R* :cache yes 
tsp <- binomial.twostage(margbin,data=data,
                     clusters=data$cluster,
                     theta=c(2,1),detail=0,
              random.design=out$des.rv,theta.des=out$pardes,pairs=pairs)
summary(tsp)
#+END_SRC 

#+RESULTS[<2020-02-04 17:13:22> d04ffd9811c7a86a657c9bbebf7ef923ccfeaefc]:
:  Error in binomial.twostage(margbin, data = data, clusters = data$cluster,  : 
:   could not find function "binomial.twostage"
: Error in object[[i]] : object of type 'closure' is not subsettable


Here a random sample of pairs are given instead and we get other
estimates. 

#+BEGIN_SRC R :results output :exports both :session *R* :cache yes 
set.seed(100)
ssid <- sort(sample(1:nrow(pairs),nrow(pairs)/2))
tsd <- binomial.twostage(aa,data=data,clusters=data$cluster,
               theta=c(2,1),step=1.0,
               random.design=out$des.rv,iid=1,Nit=10,
  	           theta.des=out$pardes,pairs=pairs[ssid,])
summary(tsd)
#+END_SRC 

#+RESULTS[<2020-02-04 17:13:22> 0bc409902626d2e4b4828431f6db3951de86db81]:
: Error in 1:nrow(pairs) : argument of length 0
:  Error in binomial.twostage(aa, data = data, clusters = data$cluster, theta = c(2,  : 
:   could not find function "binomial.twostage"
: Error in summary(tsd) : object 'tsd' not found


To specify such a model when only the pairs are availble we show
how to specify the model. We here use the same marginal "aa"
to make the results comparable. 
The marginal can also be fitted based on available data. 

We start by selecting the data related to the pairs, and sets up new id's and 
to start we specify the model using the full design with 9 random effects. 
Below we show how one can use with only the random effects needed for each 
pair, which is typically simpler.


#+BEGIN_SRC R :results output :exports both :session *R* :cache yes 
head(pairs[ssid,])
ids <- sort(unique(c(pairs[ssid,])))

pairsids <- c(pairs[ssid,])
pair.new <- matrix(fast.approx(ids,c(pairs[ssid,])),ncol=2)
head(pair.new)

dataid <- dsort(data[ids,],"cluster")
outid <- ace.family.design(dataid,member="type",id="cluster")
outid$pardes
head(outid$des.rv)
#+END_SRC 

#+RESULTS[<2020-02-04 17:13:22> 8ffc0d4a492574f7d7b46c4548248c6d2fc2a153]:
#+begin_example
Error in head(pairs[ssid, ]) : object 'ssid' not found
Error in unique(c(pairs[ssid, ])) : object 'ssid' not found
Error: object 'ssid' not found
Error in fast.approx(ids, c(pairs[ssid, ])) : 
  could not find function "fast.approx"
Error in head(pair.new) : object 'pair.new' not found
Error in dsort(data[ids, ], "cluster") : could not find function "dsort"
Error in ace.family.design(dataid, member = "type", id = "cluster") : 
  could not find function "ace.family.design"
Error: object 'outid' not found
Error in head(outid$des.rv) : object 'outid' not found
#+end_example

Now fitting the model with the data set up 

#+BEGIN_SRC R :results output :exports both :session *R* :cache yes 
tsdid <- binomial.twostage(aa,data=dataid,clusters=dataid$cluster,
         theta=c(2,1),
         random.design=outid$des.rv,theta.des=outid$pardes,pairs=pair.new)
summary(tsdid)
#+END_SRC 

#+RESULTS[<2020-02-04 17:13:22> f9d9b90eebf8f72053adc2b56a4f8fc64e277cbe]:
:  Error in binomial.twostage(aa, data = dataid, clusters = dataid$cluster,  : 
:   could not find function "binomial.twostage"
: Error in summary(tsdid) : object 'tsdid' not found

We now specify the design specifically using the pairs. 
The random.design and design on the parameters
are now given for each pair, as a 3 dimensional matrix. 
with a direct specification of random.design and the 
design on the parameters theta.design.
In addition we need also to give the number of random effects for
each pair. These basic things are constructed by certain functions
for the ACE design. 


#+BEGIN_SRC R :results output :exports both :session *R* :cache yes 
pair.types <-  matrix(dataid[c(t(pair.new)),"type"],byrow=T,ncol=2)
head(pair.new,7)
head(pair.types,7)

theta.des  <- array(0,c(4,2,nrow(pair.new)))
random.des <- array(0,c(2,4,nrow(pair.new)))
# random variables in each pair 
rvs <- c()
for (i in 1:nrow(pair.new))
{
	if (pair.types[i,1]=="mother" & pair.types[i,2]=="father")
	{
	theta.des[,,i] <- rbind(c(1,0),c(1,0),c(0,1),c(0,0))
       	random.des[,,i] <- rbind(c(1,0,1,0),c(0,1,1,0))
	rvs <- c(rvs,3)
	} else {
  	theta.des[,,i] <- rbind(c(0.5,0),c(0.5,0),c(0.5,0),c(0,1))
	random.des[,,i] <- rbind(c(1,1,0,1),c(1,0,1,1))
	rvs <- c(rvs,4)
	}
}
#+END_SRC 

#+RESULTS[<2020-02-04 17:13:22> acd450e0f40ff9e9ad4a8f02dff4936792902e05]:
: Error in matrix(dataid[c(t(pair.new)), "type"], byrow = T, ncol = 2) : 
:   object 'dataid' not found
: Error in head(pair.new, 7) : object 'pair.new' not found
: Error in head(pair.types, 7) : object 'pair.types' not found
: Error in nrow(pair.new) : object 'pair.new' not found
: Error in nrow(pair.new) : object 'pair.new' not found
:  Error in nrow(pair.new) : object 'pair.new' not found


For pair 1 that is a mother/farther pair, we see that they share 
1 environmental random effect of size 1. There are also two genetic
effects that are unshared between the two. 
So a total of 3 random effects are needed here. The theta.des relates the 3 
random effects to possible relationships in the parameters. Here the genetic
effects are full and so is the environmental effect. 
In contrast we also consider a mother/child pair that share half the genes, now
with random effects with (1/2) gene variance.  We there need 4 random effects,
2 non-shared half-gene, 1 shared half-gene, and one shared full environmental 
effect. 

#+BEGIN_SRC R :results output :exports both :session *R* :cache yes 
# 3 rvs here 
random.des[,,1]
theta.des[,,1]
# 4 rvs here 
random.des[,,2]
theta.des[,,2]
head(rvs)
#+END_SRC 

#+RESULTS[<2020-02-04 17:13:22> 34cbca7f786880736755510b0bb97ba26a02e32e]:
: Error: object 'random.des' not found
: Error: object 'theta.des' not found
: Error: object 'random.des' not found
: Error: object 'theta.des' not found
: NULL

Now fitting the model, and we see that it is a lot quicker due to the
fewer random effects needed for pairs. 

#+BEGIN_SRC R :results output :exports both :session *R* :cache yes 
tsdid2 <- binomial.twostage(aa,data=dataid,clusters=dataid$cluster,
           theta=c(2,1),
           random.design=random.des,
           theta.des=theta.des,pairs=pair.new,pairs.rvs=rvs)
summary(tsdid2)
#+END_SRC 

#+RESULTS[<2020-02-04 17:13:22> ace3646a6408f5501800fec091ce5f42cbc54db5]:
:  Error in binomial.twostage(aa, data = dataid, clusters = dataid$cluster,  : 
:   could not find function "binomial.twostage"
: Error in summary(tsdid2) : object 'tsdid2' not found

The same model can be specifed even simpler via the kinship
coefficient.  For this speicification there are 4 random effects for
each pair, but some have variance 0. The mother-father pair, here
shares a random effect with variance 0, and have two non-shared genetic 
effects with full variance, in addition to a fully shared environmental 
effect.

#+BEGIN_SRC R :results output :exports both :session *R* :cache yes 
kinship  <- c()
for (i in 1:nrow(pair.new))
{
if (pair.types[i,1]=="mother" & pair.types[i,2]=="father") pk1 <- 0 else pk1 <- 0.5
kinship <- c(kinship,pk1)
}
head(kinship,n=10)

out <- make.pairwise.design(pair.new,kinship,type="ace") 
names(out)
out$random.des[,,1]
out$theta.des[,,1]
#+END_SRC 

#+RESULTS[11c9949740bb3fe5d415b91c9f4d99b0565bd7d9]:
#+begin_example
 [1] 0.0 0.5 0.5 0.5 0.0 0.5 0.5 0.5 0.5 0.5
[1] "random.design" "theta.des"     "ant.rvs"
     [,1] [,2] [,3] [,4]
[1,]    1    1    0    1
[2,]    1    0    1    1
     [,1] [,2]
[1,]    0    0
[2,]    1    0
[3,]    1    0
[4,]    0    1
#+end_example

Now, fitting the model we get the results from before. 

#+BEGIN_SRC R :results output :exports both :session *R* :cache yes 
tsdid3 <- binomial.twostage(aa,data=dataid,clusters=dataid$cluster,
             theta=c(2,1)/9,random.design=out$random.design,
             theta.des=out$theta.des,pairs=pair.new,pairs.rvs=out$ant.rvs)
summary(tsdid3)
#+END_SRC 

#+RESULTS[6f93e6815d5d4e5b174712b4163c9d0d59ba977a]:
: Dependence parameter for Clayton-Oakes model
: Variance of Gamma distributed random effects 
: Error in theta.des %*% theta : non-conformable arguments


* Pairwise odds ratio model 

To fit the pairwise odds-ratio model in the case of a pair-specification there 
are two options for fitting the model. 

1. One option is to set up some artificial data similar to twin data with
 - a pair-cluster-id  (clusters) 
 - with a cluster-id to get GEE type standard errors (se.cluster) 
- We can also use the specify the design via the theta.des that is also a 
  matrix of dimension pairs x design with the design for POR model.  


Starting by the second option. We need to start by specify the design of
the odds-ratio of each pair. We set up the data and find all combinations 
within the pairs. Subsequently, we remove all the empty groups, by grouping
together the factor levels 4:9, and then we construct the design. 

#+BEGIN_SRC R :results output :exports both :session *R* :cache yes 
tdp <-cbind( dataid[pair.new[,1],],dataid[pair.new[,2],])
names(tdp) <- c(paste(names(dataid),"1",sep=""),
		paste(names(dataid),"2",sep=""))
tdp <-transform(tdp,tt=interaction(type1,type2))
dlevel(tdp)
drelevel(tdp,newlevels=list(mother.father=4:9)) <-  obs.types~tt
dtable(tdp,~tt+obs.types)
tdp <- model.matrix(~-1+factor(obs.types),tdp)
#+END_SRC 

#+RESULTS[<2020-02-04 17:13:22> cda59526ba7e843dda1c83c85c4e7f2d57d31bb9]:
#+begin_example
Error in cbind(dataid[pair.new[, 1], ], dataid[pair.new[, 2], ]) : 
  object 'dataid' not found
 Error in paste(names(dataid), "1", sep = "") : object 'dataid' not found
Error in transform(tdp, tt = interaction(type1, type2)) : 
  object 'tdp' not found
Error in dlevel(tdp) : could not find function "dlevel"
Error in drelevel(tdp, newlevels = list(mother.father = 4:9)) <- obs.types ~  : 
  object 'tdp' not found
Error in dtable(tdp, ~tt + obs.types) : could not find function "dtable"
Error in terms.formula(object, data = data) : object 'tdp' not found
#+end_example

We then can fit the pairwise model using the pairs and the pair-design for
descrbing the OR. The results are consistent with the the ACE model as
the mother-father have a lower dependence as is due only the environmental
effects. All other combinations should have the same dependence as also seem
to be the case. 

To fit the OR model it is generally recommended to use the var.link to
use the parmetrization with log-odd-ratio regression.


#+BEGIN_SRC R :results output :exports both :session *R* :cache yes 
porpair <- binomial.twostage(aa,data=dataid,clusters=dataid$cluster,
           theta.des=tdp,pairs=pair.new,model="or",var.link=1)
summary(porpair)
#+END_SRC 

#+RESULTS[c4026bc9a6236f8e96b140585e44876e3bcce6a5]:
#+begin_example
Dependence parameter for Odds-Ratio (Plackett) model 
With log-link 
$estimates
                                   theta         se
factor(obs.types)mother.father 0.1269881 0.03132228
factor(obs.types)child.child   0.3819107 0.03108233
factor(obs.types)father.child  0.3046284 0.02239909
factor(obs.types)mother.child  0.3293741 0.02233648

$or
                            Estimate Std.Err 2.5% 97.5%   P-value
factor(obs.types)moth....       1.14  0.0356 1.07  1.21 1.16e-223
factor(obs.types)chil....       1.47  0.0455 1.38  1.55 4.26e-227
factor(obs.types)fath....       1.36  0.0304 1.30  1.42  0.00e+00
factor(obs.types)moth.....1     1.39  0.0310 1.33  1.45  0.00e+00

$type
[1] "or"

attr(,"class")
[1] "summary.mets.twostage"
#+end_example


* COMMENT 

